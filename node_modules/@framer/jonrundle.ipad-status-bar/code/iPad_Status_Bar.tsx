import * as React from "react";

import { ControlType, Frame, PropertyControls, loadJSON } from "framer";

type Appearance = "dark" | "light"

// Define type of property
interface Props {
    appearance: Appearance
    time: string;
    date: string;
    wifi: number;
    battery: number;
    width: number;
    height: number;
}

interface State {
    time: string
  }

export class iPad_Status_Bar extends React.Component<Props> {

    // Set default properties
    static defaultProps = {
        appearance: "dark",
        liveTime: true,
        time: "9:54 AM",
        date: "Fri Oct 5",
        wifi: 100,
        battery: 100,
        width: 768,
        height: 20,
    }

    // Items shown in property panel
    static propertyControls: PropertyControls = {
        appearance: {
            type: ControlType.Enum,
            options: ["dark", "light"],
            optionTitles: ["Dark", "Light"],
            title: "Appearance"
        },
        liveTime: {
            type: ControlType.Boolean,
            disabledTitle: "No",
            enabledTitle: "Yes",
            title: "Real time"
        },
        time: { 
            type: ControlType.String, 
            title: "Time",
            hidden(props) {
                return props.liveTime
            }
        },
        date: { 
            type: ControlType.String, 
            title: "Date",
            hidden(props) {
                return props.liveTime
            }
        },
        wifi: { 
            type: ControlType.Number,
            min: 0,
            max: 100,
            title: "Wifi"
        },
        battery: { 
            type: ControlType.Number,
            min: 0,
            max: 100,
            title: "Battery"
        },
    }

    timer: number

    state = {
        time: '9:54 AM',
        date: 'Fri Oct 5'
    }

    componentDidMount() {
        this.timer = window.setInterval(() => {
            this.updateTime()
        }, 1000)
    }

    componentWillUnmount() {
        window.clearInterval(this.timer)
    }

    updateTime = () => {
        let time = "";
        let date = "";

        if (this.props.liveTime) {
            const getDate = new Date()
            const hour = getDate.getHours()
            if (hour > 12) {
                time = (getDate.getHours() - 12) + ":" + ("0" + getDate.getMinutes()).slice(-2) + " PM"
            } else {
                time = (getDate.getHours()) + ":" + ("0" + getDate.getMinutes()).slice(-2) + " AM"
            }

            let dow = getDate.getDay().toString()
            let month = getDate.getMonth().toString()
            const day = getDate.getDate().toString()

            switch (dow) {
                case "0":
                    dow = "Sun";
                    break;
                case "1":
                    dow = "Mon";
                    break;
                case "2":
                    dow = "Tue";
                    break;
                case "3":
                    dow = "Wed";
                    break;
                case "4":
                    dow = "Thu";
                    break;
                case "5":
                    dow = "Fri";
                    break;
                case "6":
                    dow = "Sat";
            }

            switch (month) {
                case "0":
                    month = "Jan";
                    break;
                case "1":
                    month = "Feb";
                    break;
                case "2":
                    month = "Mar";
                    break;
                case "3":
                    month = "Apr";
                    break;
                case "4":
                    month = "May";
                    break;
                case "5":
                    month = "Jun";
                    break;
                case "6":
                    month = "Jul";
                    break;
                case "7":
                    month = "Aug";
                    break;
                case "8":
                    month = "Sep";
                    break;
                case "9":
                    month = "Oct";
                    break;
                case "10":
                    month = "Nov";
                    break;
                case "11":
                    month = "Dec";
            }

            date = dow + " " + month + " " + day
        } else {
            time = this.props.time,
            date = this.props.date
        }

        this.setState({time})
        this.setState({date})
    }

    render() {
        return (
            <Frame
                width={this.props.width}
                height={this.props.height}
                background={null}
                style={{
                    display: "flex",
                    justifyContent: "space-between",
                    alignItems: "center",
                    fontSize: 12,
                    color: this.props.appearance === "dark" ? "black" : "white",
                }}
            >
                <Frame top={0} left={0} right={0} height={20} background={null}>
                    <Frame left={6} width={160} top={0} background={null}>
                        <div style={{
                            textAlign: "left",
                            fontFamily: "system-ui, -apple-system",
                            fontSize: "12px",
                            fontWeight: 500,
                            color: "inherit",
                            marginTop: "2px",
                            display: "flex",
                        }}>
                            <div style={{
                                textTransform: "uppercase",
                            }}>
                                {this.state.time}
                            </div>
                            <div style={{
                                marginLeft: "10px",
                            }}>
                                {this.state.date}
                            </div>
                        </div>
                    </Frame>
                    <Frame right={6} top={0} background={null} style={{
                        display: "flex",
                        justifyContent: "flex-end"
                    }}>
                        <div style={{
                            textAlign: "right",
                            fontFamily: "system-ui, -apple-system",
                            fontSize: "12px",
                            fontWeight: 500,
                            color: "inherit",
                            marginTop: "2px",
                            display: "flex",
                        }}>
                            <div style={{
                                fill: "black",
                                stroke: "black",
                                width: "auto",
                                marginRight: 4,
                                paddingTop: 1,
                            }}
                            dangerouslySetInnerHTML={{
                                __html: wifiSVG(this.props.appearance, this.props.wifi)
                            }}
                            />
                            <div style={{
                                letterSpacing: "0.2px",
                            }}>
                                {this.props.battery}%
                            </div>
                            <div style={{
                                fill: "black",
                                stroke: "black",
                                width: "auto",
                                paddingTop: 2,
                                marginLeft: 4,
                            }}
                            dangerouslySetInnerHTML={{
                                __html: batterySVG(this.props.appearance, this.props.battery),
                            }}
                            />
                        </div>
                    </Frame>
                </Frame>
            </Frame>
        )
    }
}

function batterySVG(appearance: Appearance, battery: number) {
    const color = appearance === "dark" ? "black" : "white"
    const batteryBar = battery <= 10 ? "red" : battery <= 20 ? "#FFCC01" : color

    return `<svg width="27px" height="12px" viewBox="0 0 27 12" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
            <g transform="translate(-1080.000000, -4.000000)">
                <g transform="translate(1004.000000, 3.000000)">
                    <g transform="translate(75.250000, 1.000000)">
                        <path d="M4.91631345,0.5 C3.67096879,0.5 3.16799363,0.597128983 2.64842516,0.874997243 C2.20592977,1.11164637 1.86164637,1.45592977 1.62499724,1.89842516 C1.34712898,2.41799363 1.25,2.92096879 1.25,4.16631345 L1.25,7.83368655 C1.25,9.07903121 1.34712898,9.58200637 1.62499724,10.1015748 C1.86164637,10.5440702 2.20592977,10.8883536 2.64842516,11.1250028 C3.16799363,11.402871 3.67096879,11.5 4.91631345,11.5 L20.5836866,11.5 C21.8290312,11.5 22.3320064,11.402871 22.8515748,11.1250028 C23.2940702,10.8883536 23.6383536,10.5440702 23.8750028,10.1015748 C24.152871,9.58200637 24.25,9.07903121 24.25,7.83368655 L24.25,4.16631345 C24.25,2.92096879 24.152871,2.41799363 23.8750028,1.89842516 C23.6383536,1.45592977 23.2940702,1.11164637 22.8515748,0.874997243 C22.3320064,0.597128983 21.8290312,0.5 20.5836866,0.5 L4.91631345,0.5 Z M26.25,4.68406549 L26.25,7.31593451 C26.8649323,7.02856797 27.25,6.52894825 27.25,6 C27.25,5.47105175 26.8649323,4.97143203 26.25,4.68406549 Z" stroke="${color}" opacity="0.4"></path>
                        <rect fill="${batteryBar}" fill-rule="nonzero" x="2.7777" y="2" height="8" rx="1.5" width="${Math.round((battery / 100) * 19 + 1)}"></rect>
                    </g>
                </g>
            </g>
        </g>
    </svg>`
}

function wifiSVG(appearance: Appearance, wifi: number) {
    const color = appearance === "dark" ? "black" : "white"

    return `<svg width="15px" height="11px" viewBox="0 0 15 11" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
            <g transform="translate(-1026.000000, -4.000000)" fill="${color}">
                <g transform="translate(1004.000000, 3.000000)">
                    <g transform="translate(22.000000, 1.000000)">
                        <path d="M12.9787477,4.57918333 C13.0922477,4.68568333 13.2672477,4.68618333 13.3777477,4.57618333 L14.4417477,3.51218333 C14.5562477,3.39718333 14.5567477,3.20768333 14.4387477,3.09618333 C12.6297477,1.38368333 10.1882477,0.333183333 7.50074768,0.333183333 C4.81324768,0.333183333 2.37174768,1.38368333 0.562747681,3.09618333 C0.444747681,3.20768333 0.445247681,3.39718333 0.559747681,3.51218333 L1.62374768,4.57618333 C1.73424768,4.68618333 1.90924768,4.68568333 2.02274768,4.57918333 C3.45724768,3.23468333 5.38424768,2.41018333 7.50074768,2.41018333 C9.61724768,2.41018333 11.5442477,3.23468333 12.9787477,4.57918333 Z" opacity="${wifi >= 66 ? 1 : 0.4}"></path>
                        <path d="M10.5318698,7.02963333 C10.6473698,7.13263333 10.8198698,7.13363333 10.9293698,7.02413333 L11.9918698,5.96163333 C12.1073698,5.84613333 12.1078698,5.65363333 11.9878698,5.54313333 C10.8068698,4.45763333 9.23136975,3.79463333 7.50086975,3.79463333 C5.77036975,3.79463333 4.19486975,4.45763333 3.01386975,5.54313333 C2.89386975,5.65363333 2.89436975,5.84613333 3.00986975,5.96163333 L4.07236975,7.02413333 C4.18186975,7.13363333 4.35436975,7.13263333 4.46986975,7.02963333 C5.27586975,6.31013333 6.33786975,5.87163333 7.50086975,5.87163333 C8.66386975,5.87163333 9.72586975,6.31013333 10.5318698,7.02963333 Z" opacity="${wifi >= 33 ? 1 : 0.4}"></path>
                        <path d="M9.54422015,8.41078333 C9.66022015,8.29478333 9.66122015,8.09928333 9.53572015,7.99428333 C8.98472015,7.53378333 8.27622015,7.25628333 7.50222015,7.25628333 C6.72822015,7.25628333 6.01922015,7.53378333 5.46872015,7.99428333 C5.34272015,8.09928333 5.34422015,8.29478333 5.46022015,8.41078333 L7.29822015,10.2487833 C7.41072015,10.3612833 7.59372015,10.3612833 7.70622015,10.2487833 L9.54422015,8.41078333 Z" opacity="${wifi != 0 ? 1 : 0.4}"></path>
                    </g>
                </g>
            </g>
        </g>
    </svg>`
}